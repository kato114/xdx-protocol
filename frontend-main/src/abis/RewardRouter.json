{
  "address": "0x262b80E5C82153367e6116F284Dfe4D31765e093",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "StakeXdx",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "StakeXlx",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "UnstakeXdx",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "UnstakeXlx",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        }
      ],
      "name": "acceptTransfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_accounts",
          "type": "address[]"
        }
      ],
      "name": "batchCompoundForAccounts",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_amounts",
          "type": "uint256[]"
        }
      ],
      "name": "batchStakeXdxForAccount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bnXdx",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bonusXdxTracker",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimEsXdx",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "compound",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "compoundForAccount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "esXdx",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeXdxTracker",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeXlxTracker",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gov",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_shouldClaimXdx",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "_shouldStakeXdx",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "_shouldClaimEsXdx",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "_shouldStakeEsXdx",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "_shouldStakeMultiplierPoints",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "_shouldClaimWeth",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "_shouldConvertWethToEth",
          "type": "bool"
        }
      ],
      "name": "handleRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_weth",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_xdx",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_esXdx",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_bnXdx",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_xlx",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_stakedXdxTracker",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_bonusXdxTracker",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_feeXdxTracker",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_feeXlxTracker",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_stakedXlxTracker",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_xlxManager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_xdxVester",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_xlxVester",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isInitialized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minUsdg",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minXlx",
          "type": "uint256"
        }
      ],
      "name": "mintAndStakeXlx",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_minUsdg",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minXlx",
          "type": "uint256"
        }
      ],
      "name": "mintAndStakeXlxETH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "pendingReceivers",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_gov",
          "type": "address"
        }
      ],
      "name": "setGov",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        }
      ],
      "name": "signalTransfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "stakeEsXdx",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "stakeXdx",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "stakeXdxForAccount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakedXdxTracker",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakedXlxTracker",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_xlxAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minOut",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        }
      ],
      "name": "unstakeAndRedeemXlx",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_xlxAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minOut",
          "type": "uint256"
        },
        {
          "internalType": "address payable",
          "name": "_receiver",
          "type": "address"
        }
      ],
      "name": "unstakeAndRedeemXlxETH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "unstakeEsXdx",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "unstakeXdx",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "weth",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "xdx",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "xdxVester",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "xlx",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "xlxManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "xlxVester",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x872e1d9dc62eb024e76b839ae4e3d653412a73c4994009450bea10d943babf7c",
  "receipt": {
    "to": null,
    "from": "0xf5CA36c9873d61Bc28C117BD470981Ef6647A685",
    "contractAddress": "0x262b80E5C82153367e6116F284Dfe4D31765e093",
    "transactionIndex": 2,
    "gasUsed": "4718287",
    "logsBloom": "0x
    "blockHash": "0x8da27922aab3d1e90ce88bd80089aa225994293e91733eb222d8c3e82ef042e3",
    "transactionHash": "0x872e1d9dc62eb024e76b839ae4e3d653412a73c4994009450bea10d943babf7c",
    "logs": [],
    "blockNumber": 17372010,
    "cumulativeGasUsed": "4960977",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "a5c1ec6ed734a994a4a7c4ed9bed389b",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"StakeXdx\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"StakeXlx\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UnstakeXdx\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UnstakeXlx\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"acceptTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_accounts\",\"type\":\"address[]\"}],\"name\":\"batchCompoundForAccounts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"batchStakeXdxForAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bnXdx\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bonusXdxTracker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimEsXdx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"compound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"compoundForAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"esXdx\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeXdxTracker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeXlxTracker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gov\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_shouldClaimXdx\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_shouldStakeXdx\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_shouldClaimEsXdx\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_shouldStakeEsXdx\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_shouldStakeMultiplierPoints\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_shouldClaimWeth\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_shouldConvertWethToEth\",\"type\":\"bool\"}],\"name\":\"handleRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_xdx\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_esXdx\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bnXdx\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_xlx\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stakedXdxTracker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bonusXdxTracker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeXdxTracker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeXlxTracker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stakedXlxTracker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_xlxManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_xdxVester\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_xlxVester\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minUsdg\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minXlx\",\"type\":\"uint256\"}],\"name\":\"mintAndStakeXlx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minUsdg\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minXlx\",\"type\":\"uint256\"}],\"name\":\"mintAndStakeXlxETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pendingReceivers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gov\",\"type\":\"address\"}],\"name\":\"setGov\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"signalTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stakeEsXdx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stakeXdx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stakeXdxForAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakedXdxTracker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakedXlxTracker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_xlxAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minOut\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"unstakeAndRedeemXlx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_xlxAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minOut\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"unstakeAndRedeemXlxETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"unstakeEsXdx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"unstakeXdx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"xdx\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"xdxVester\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"xlx\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"xlxManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"xlxVester\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/staking/RewardRouterV2.sol\":\"RewardRouterV2\"},\"evmVersion\":\"istanbul\",\"libraries\":{\"__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":20},\"remappings\":[]},\"sources\":{\"contracts/access/Governable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ncontract Governable {\\n    address public gov;\\n\\n    constructor() public {\\n        gov = msg.sender;\\n    }\\n\\n    modifier onlyGov() {\\n        require(msg.sender == gov, \\\"Governable: forbidden\\\");\\n        _;\\n    }\\n\\n    function setGov(address _gov) external onlyGov {\\n        gov = _gov;\\n    }\\n}\\n\",\"keccak256\":\"0xe719b0de64ee00468f6a985c8ef08ebdd271d99d6616308cbba458f78ed8c532\",\"license\":\"MIT\"},\"contracts/core/interfaces/IVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"./IVaultUtils.sol\\\";\\n\\ninterface IVault {\\n    function isInitialized() external view returns (bool);\\n    function isSwapEnabled() external view returns (bool);\\n    function isLeverageEnabled() external view returns (bool);\\n\\n    function setVaultUtils(IVaultUtils _vaultUtils) external;\\n    function setError(uint256 _errorCode, string calldata _error) external;\\n\\n    function router() external view returns (address);\\n    function usdg() external view returns (address);\\n    function gov() external view returns (address);\\n\\n    function whitelistedTokenCount() external view returns (uint256);\\n    function maxLeverage() external view returns (uint256);\\n\\n    function minProfitTime() external view returns (uint256);\\n    function hasDynamicFees() external view returns (bool);\\n    function fundingInterval() external view returns (uint256);\\n    function totalTokenWeights() external view returns (uint256);\\n    function getTargetUsdgAmount(address _token) external view returns (uint256);\\n\\n    function inManagerMode() external view returns (bool);\\n    function inPrivateLiquidationMode() external view returns (bool);\\n\\n    function maxGasPrice() external view returns (uint256);\\n\\n    function approvedRouters(address _account, address _router) external view returns (bool);\\n    function isLiquidator(address _account) external view returns (bool);\\n    function isManager(address _account) external view returns (bool);\\n\\n    function minProfitBasisPoints(address _token) external view returns (uint256);\\n    function tokenBalances(address _token) external view returns (uint256);\\n    function lastFundingTimes(address _token) external view returns (uint256);\\n\\n    function setMaxLeverage(uint256 _maxLeverage) external;\\n    function setInManagerMode(bool _inManagerMode) external;\\n    function setManager(address _manager, bool _isManager) external;\\n    function setIsSwapEnabled(bool _isSwapEnabled) external;\\n    function setIsLeverageEnabled(bool _isLeverageEnabled) external;\\n    function setMaxGasPrice(uint256 _maxGasPrice) external;\\n    function setUsdgAmount(address _token, uint256 _amount) external;\\n    function setBufferAmount(address _token, uint256 _amount) external;\\n    function setMaxGlobalShortSize(address _token, uint256 _amount) external;\\n    function setInPrivateLiquidationMode(bool _inPrivateLiquidationMode) external;\\n    function setLiquidator(address _liquidator, bool _isActive) external;\\n\\n    function setFundingRate(uint256 _fundingInterval, uint256 _fundingRateFactor, uint256 _stableFundingRateFactor) external;\\n\\n    function setFees(\\n        uint256 _taxBasisPoints,\\n        uint256 _stableTaxBasisPoints,\\n        uint256 _mintBurnFeeBasisPoints,\\n        uint256 _swapFeeBasisPoints,\\n        uint256 _stableSwapFeeBasisPoints,\\n        uint256 _marginFeeBasisPoints,\\n        uint256 _liquidationFeeUsd,\\n        uint256 _minProfitTime,\\n        bool _hasDynamicFees\\n    ) external;\\n\\n    function setTokenConfig(\\n        address _token,\\n        uint256 _tokenDecimals,\\n        uint256 _redemptionBps,\\n        uint256 _minProfitBps,\\n        uint256 _maxUsdgAmount,\\n        bool _isStable,\\n        bool _isShortable\\n    ) external;\\n\\n    function setPriceFeed(address _priceFeed) external;\\n    function withdrawFees(address _token, address _receiver) external returns (uint256);\\n\\n    function directPoolDeposit(address _token) external;\\n    function buyUSDG(address _token, address _receiver) external returns (uint256);\\n    function sellUSDG(address _token, address _receiver) external returns (uint256);\\n    function swap(address _tokenIn, address _tokenOut, address _receiver) external returns (uint256);\\n    function increasePosition(address _account, address _collateralToken, address _indexToken, uint256 _sizeDelta, bool _isLong) external;\\n    function decreasePosition(address _account, address _collateralToken, address _indexToken, uint256 _collateralDelta, uint256 _sizeDelta, bool _isLong, address _receiver) external returns (uint256);\\n    function validateLiquidation(address _account, address _collateralToken, address _indexToken, bool _isLong, bool _raise) external view returns (uint256, uint256);\\n    function liquidatePosition(address _account, address _collateralToken, address _indexToken, bool _isLong, address _feeReceiver) external;\\n    function tokenToUsdMin(address _token, uint256 _tokenAmount) external view returns (uint256);\\n\\n    function priceFeed() external view returns (address);\\n    function fundingRateFactor() external view returns (uint256);\\n    function stableFundingRateFactor() external view returns (uint256);\\n    function cumulativeFundingRates(address _token) external view returns (uint256);\\n    function getNextFundingRate(address _token) external view returns (uint256);\\n    function getFeeBasisPoints(address _token, uint256 _usdgDelta, uint256 _feeBasisPoints, uint256 _taxBasisPoints, bool _increment) external view returns (uint256);\\n\\n    function liquidationFeeUsd() external view returns (uint256);\\n    function taxBasisPoints() external view returns (uint256);\\n    function stableTaxBasisPoints() external view returns (uint256);\\n    function mintBurnFeeBasisPoints() external view returns (uint256);\\n    function swapFeeBasisPoints() external view returns (uint256);\\n    function stableSwapFeeBasisPoints() external view returns (uint256);\\n    function marginFeeBasisPoints() external view returns (uint256);\\n\\n    function allWhitelistedTokensLength() external view returns (uint256);\\n    function allWhitelistedTokens(uint256) external view returns (address);\\n    function whitelistedTokens(address _token) external view returns (bool);\\n    function stableTokens(address _token) external view returns (bool);\\n    function shortableTokens(address _token) external view returns (bool);\\n    function feeReserves(address _token) external view returns (uint256);\\n    function globalShortSizes(address _token) external view returns (uint256);\\n    function globalShortAveragePrices(address _token) external view returns (uint256);\\n    function maxGlobalShortSizes(address _token) external view returns (uint256);\\n    function tokenDecimals(address _token) external view returns (uint256);\\n    function tokenWeights(address _token) external view returns (uint256);\\n    function guaranteedUsd(address _token) external view returns (uint256);\\n    function poolAmounts(address _token) external view returns (uint256);\\n    function bufferAmounts(address _token) external view returns (uint256);\\n    function reservedAmounts(address _token) external view returns (uint256);\\n    function usdgAmounts(address _token) external view returns (uint256);\\n    function maxUsdgAmounts(address _token) external view returns (uint256);\\n    function getRedemptionAmount(address _token, uint256 _usdgAmount) external view returns (uint256);\\n    function getMaxPrice(address _token) external view returns (uint256);\\n    function getMinPrice(address _token) external view returns (uint256);\\n\\n    function getDelta(address _indexToken, uint256 _size, uint256 _averagePrice, bool _isLong, uint256 _lastIncreasedTime) external view returns (bool, uint256);\\n    function getPosition(address _account, address _collateralToken, address _indexToken, bool _isLong) external view returns (uint256, uint256, uint256, uint256, uint256, uint256, bool, uint256);\\n}\\n\",\"keccak256\":\"0x247067b8f88636424e799a2b72b81884273813e62ad3bfedf428e0fb97714637\",\"license\":\"MIT\"},\"contracts/core/interfaces/IVaultUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IVaultUtils {\\n    function updateCumulativeFundingRate(address _collateralToken, address _indexToken) external returns (bool);\\n    function validateIncreasePosition(address _account, address _collateralToken, address _indexToken, uint256 _sizeDelta, bool _isLong) external view;\\n    function validateDecreasePosition(address _account, address _collateralToken, address _indexToken, uint256 _collateralDelta, uint256 _sizeDelta, bool _isLong, address _receiver) external view;\\n    function validateLiquidation(address _account, address _collateralToken, address _indexToken, bool _isLong, bool _raise) external view returns (uint256, uint256);\\n    function getEntryFundingRate(address _collateralToken, address _indexToken, bool _isLong) external view returns (uint256);\\n    function getPositionFee(address _account, address _collateralToken, address _indexToken, bool _isLong, uint256 _sizeDelta) external view returns (uint256);\\n    function getFundingFee(address _account, address _collateralToken, address _indexToken, bool _isLong, uint256 _size, uint256 _entryFundingRate) external view returns (uint256);\\n    function getBuyUsdgFeeBasisPoints(address _token, uint256 _usdgAmount) external view returns (uint256);\\n    function getSellUsdgFeeBasisPoints(address _token, uint256 _usdgAmount) external view returns (uint256);\\n    function getSwapFeeBasisPoints(address _tokenIn, address _tokenOut, uint256 _usdgAmount) external view returns (uint256);\\n    function getFeeBasisPoints(address _token, uint256 _usdgDelta, uint256 _feeBasisPoints, uint256 _taxBasisPoints, bool _increment) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xc8cad694c33f968559eb3feac2226fe26d81d457529b87ae8852390e1474d7be\",\"license\":\"MIT\"},\"contracts/core/interfaces/IXlxManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"./IVault.sol\\\";\\n\\ninterface IXlxManager {\\n  function xlx() external view returns (address);\\n\\n  function usdg() external view returns (address);\\n\\n  function vault() external view returns (IVault);\\n\\n  function cooldownDuration() external returns (uint256);\\n\\n  function getAumInUsdg(bool maximise) external view returns (uint256);\\n\\n  function lastAddedAt(address _account) external returns (uint256);\\n\\n  function addLiquidity(\\n    address _token,\\n    uint256 _amount,\\n    uint256 _minUsdg,\\n    uint256 _minXlx\\n  ) external returns (uint256);\\n\\n  function addLiquidityForAccount(\\n    address _fundingAccount,\\n    address _account,\\n    address _token,\\n    uint256 _amount,\\n    uint256 _minUsdg,\\n    uint256 _minXlx\\n  ) external returns (uint256);\\n\\n  function removeLiquidity(\\n    address _tokenOut,\\n    uint256 _xlxAmount,\\n    uint256 _minOut,\\n    address _receiver\\n  ) external returns (uint256);\\n\\n  function removeLiquidityForAccount(\\n    address _account,\\n    address _tokenOut,\\n    uint256 _xlxAmount,\\n    uint256 _minOut,\\n    address _receiver\\n  ) external returns (uint256);\\n\\n  function setShortsTrackerAveragePriceWeight(uint256 _shortsTrackerAveragePriceWeight) external;\\n\\n  function setCooldownDuration(uint256 _cooldownDuration) external;\\n}\\n\",\"keccak256\":\"0xaef3e8450dc324b20c1625ab5f58bb84481b4cba02ef514857fa563fd3baeada\",\"license\":\"MIT\"},\"contracts/libraries/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x41b0da7db3e1f79b338824fed2bc4732430b78002a9d51c2cfa86ad5a12c2763\",\"license\":\"MIT\"},\"contracts/libraries/token/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xa3ce253082421a9e79d2b884ae6f60507b0cc73ea356674072091454c44cc556\",\"license\":\"MIT\"},\"contracts/libraries/token/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../math/SafeMath.sol\\\";\\nimport \\\"../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf80766b21ea67a73c81e0dea4543375243938c8b223e29c5d783be61ab3f424c\",\"license\":\"MIT\"},\"contracts/libraries/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.2;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1845481964ebacf35afe1a006fa574793b52e698eba0a8db6e3d30202bc45429\",\"license\":\"MIT\"},\"contracts/libraries/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\ncontract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xae7a1e407ed171ecd3a0d3976875d6c58eefdccf831ebce6314ec94892dffc03\",\"license\":\"MIT\"},\"contracts/staking/RewardRouterV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"../libraries/math/SafeMath.sol\\\";\\nimport \\\"../libraries/token/IERC20.sol\\\";\\nimport \\\"../libraries/token/SafeERC20.sol\\\";\\nimport \\\"../libraries/utils/ReentrancyGuard.sol\\\";\\nimport \\\"../libraries/utils/Address.sol\\\";\\n\\nimport \\\"./interfaces/IRewardTracker.sol\\\";\\nimport \\\"./interfaces/IRewardRouterV2.sol\\\";\\nimport \\\"./interfaces/IVester.sol\\\";\\nimport \\\"../tokens/interfaces/IMintable.sol\\\";\\nimport \\\"../tokens/interfaces/IWETH.sol\\\";\\nimport \\\"../core/interfaces/IXlxManager.sol\\\";\\nimport \\\"../access/Governable.sol\\\";\\n\\ncontract RewardRouterV2 is IRewardRouterV2, ReentrancyGuard, Governable {\\n  using SafeMath for uint256;\\n  using SafeERC20 for IERC20;\\n  using Address for address payable;\\n\\n  bool public isInitialized;\\n\\n  address public weth;\\n\\n  address public xdx;\\n  address public esXdx;\\n  address public bnXdx;\\n\\n  address public xlx; // XDX Liquidity Provider token\\n\\n  address public stakedXdxTracker;\\n  address public bonusXdxTracker;\\n  address public feeXdxTracker;\\n\\n  address public override stakedXlxTracker;\\n  address public override feeXlxTracker;\\n\\n  address public xlxManager;\\n\\n  address public xdxVester;\\n  address public xlxVester;\\n\\n  mapping(address => address) public pendingReceivers;\\n\\n  event StakeXdx(address account, address token, uint256 amount);\\n  event UnstakeXdx(address account, address token, uint256 amount);\\n\\n  event StakeXlx(address account, uint256 amount);\\n  event UnstakeXlx(address account, uint256 amount);\\n\\n  receive() external payable {\\n    require(msg.sender == weth, \\\"Router: invalid sender\\\");\\n  }\\n\\n  function initialize(\\n    address _weth,\\n    address _xdx,\\n    address _esXdx,\\n    address _bnXdx,\\n    address _xlx,\\n    address _stakedXdxTracker,\\n    address _bonusXdxTracker,\\n    address _feeXdxTracker,\\n    address _feeXlxTracker,\\n    address _stakedXlxTracker,\\n    address _xlxManager,\\n    address _xdxVester,\\n    address _xlxVester\\n  ) external onlyGov {\\n    require(!isInitialized, \\\"RewardRouter: already initialized\\\");\\n    isInitialized = true;\\n\\n    weth = _weth;\\n\\n    xdx = _xdx;\\n    esXdx = _esXdx;\\n    bnXdx = _bnXdx;\\n\\n    xlx = _xlx;\\n\\n    stakedXdxTracker = _stakedXdxTracker;\\n    bonusXdxTracker = _bonusXdxTracker;\\n    feeXdxTracker = _feeXdxTracker;\\n\\n    feeXlxTracker = _feeXlxTracker;\\n    stakedXlxTracker = _stakedXlxTracker;\\n\\n    xlxManager = _xlxManager;\\n\\n    xdxVester = _xdxVester;\\n    xlxVester = _xlxVester;\\n  }\\n\\n  // to help users who accidentally send their tokens to this contract\\n  function withdrawToken(\\n    address _token,\\n    address _account,\\n    uint256 _amount\\n  ) external onlyGov {\\n    IERC20(_token).safeTransfer(_account, _amount);\\n  }\\n\\n  function batchStakeXdxForAccount(address[] memory _accounts, uint256[] memory _amounts)\\n    external\\n    nonReentrant\\n    onlyGov\\n  {\\n    address _xdx = xdx;\\n    for (uint256 i = 0; i < _accounts.length; i++) {\\n      _stakeXdx(msg.sender, _accounts[i], _xdx, _amounts[i]);\\n    }\\n  }\\n\\n  function stakeXdxForAccount(address _account, uint256 _amount) external nonReentrant onlyGov {\\n    _stakeXdx(msg.sender, _account, xdx, _amount);\\n  }\\n\\n  function stakeXdx(uint256 _amount) external nonReentrant {\\n    _stakeXdx(msg.sender, msg.sender, xdx, _amount);\\n  }\\n\\n  function stakeEsXdx(uint256 _amount) external nonReentrant {\\n    _stakeXdx(msg.sender, msg.sender, esXdx, _amount);\\n  }\\n\\n  function unstakeXdx(uint256 _amount) external nonReentrant {\\n    _unstakeXdx(msg.sender, xdx, _amount, true);\\n  }\\n\\n  function unstakeEsXdx(uint256 _amount) external nonReentrant {\\n    _unstakeXdx(msg.sender, esXdx, _amount, true);\\n  }\\n\\n  function mintAndStakeXlx(\\n    address _token,\\n    uint256 _amount,\\n    uint256 _minUsdg,\\n    uint256 _minXlx\\n  ) external nonReentrant returns (uint256) {\\n    require(_amount > 0, \\\"RewardRouter: invalid _amount\\\");\\n\\n    address account = msg.sender;\\n    uint256 xlxAmount = IXlxManager(xlxManager).addLiquidityForAccount(\\n      account,\\n      account,\\n      _token,\\n      _amount,\\n      _minUsdg,\\n      _minXlx\\n    );\\n    IRewardTracker(feeXlxTracker).stakeForAccount(account, account, xlx, xlxAmount);\\n    IRewardTracker(stakedXlxTracker).stakeForAccount(account, account, feeXlxTracker, xlxAmount);\\n\\n    emit StakeXlx(account, xlxAmount);\\n\\n    return xlxAmount;\\n  }\\n\\n  function mintAndStakeXlxETH(uint256 _minUsdg, uint256 _minXlx)\\n    external\\n    payable\\n    nonReentrant\\n    returns (uint256)\\n  {\\n    require(msg.value > 0, \\\"RewardRouter: invalid msg.value\\\");\\n\\n    IWETH(weth).deposit{value: msg.value}();\\n    IERC20(weth).approve(xlxManager, msg.value);\\n\\n    address account = msg.sender;\\n    uint256 xlxAmount = IXlxManager(xlxManager).addLiquidityForAccount(\\n      address(this),\\n      account,\\n      weth,\\n      msg.value,\\n      _minUsdg,\\n      _minXlx\\n    );\\n\\n    IRewardTracker(feeXlxTracker).stakeForAccount(account, account, xlx, xlxAmount);\\n    IRewardTracker(stakedXlxTracker).stakeForAccount(account, account, feeXlxTracker, xlxAmount);\\n\\n    emit StakeXlx(account, xlxAmount);\\n\\n    return xlxAmount;\\n  }\\n\\n  function unstakeAndRedeemXlx(\\n    address _tokenOut,\\n    uint256 _xlxAmount,\\n    uint256 _minOut,\\n    address _receiver\\n  ) external nonReentrant returns (uint256) {\\n    require(_xlxAmount > 0, \\\"RewardRouter: invalid _xlxAmount\\\");\\n\\n    address account = msg.sender;\\n    IRewardTracker(stakedXlxTracker).unstakeForAccount(account, feeXlxTracker, _xlxAmount, account);\\n    IRewardTracker(feeXlxTracker).unstakeForAccount(account, xlx, _xlxAmount, account);\\n    uint256 amountOut = IXlxManager(xlxManager).removeLiquidityForAccount(\\n      account,\\n      _tokenOut,\\n      _xlxAmount,\\n      _minOut,\\n      _receiver\\n    );\\n\\n    emit UnstakeXlx(account, _xlxAmount);\\n\\n    return amountOut;\\n  }\\n\\n  function unstakeAndRedeemXlxETH(\\n    uint256 _xlxAmount,\\n    uint256 _minOut,\\n    address payable _receiver\\n  ) external nonReentrant returns (uint256) {\\n    require(_xlxAmount > 0, \\\"RewardRouter: invalid _xlxAmount\\\");\\n\\n    address account = msg.sender;\\n    IRewardTracker(stakedXlxTracker).unstakeForAccount(account, feeXlxTracker, _xlxAmount, account);\\n    IRewardTracker(feeXlxTracker).unstakeForAccount(account, xlx, _xlxAmount, account);\\n    uint256 amountOut = IXlxManager(xlxManager).removeLiquidityForAccount(\\n      account,\\n      weth,\\n      _xlxAmount,\\n      _minOut,\\n      address(this)\\n    );\\n\\n    IWETH(weth).withdraw(amountOut);\\n\\n    _receiver.sendValue(amountOut);\\n\\n    emit UnstakeXlx(account, _xlxAmount);\\n\\n    return amountOut;\\n  }\\n\\n  function claim() external nonReentrant {\\n    address account = msg.sender;\\n\\n    IRewardTracker(feeXdxTracker).claimForAccount(account, account);\\n    IRewardTracker(feeXlxTracker).claimForAccount(account, account);\\n\\n    IRewardTracker(stakedXdxTracker).claimForAccount(account, account);\\n    IRewardTracker(stakedXlxTracker).claimForAccount(account, account);\\n  }\\n\\n  function claimEsXdx() external nonReentrant {\\n    address account = msg.sender;\\n\\n    IRewardTracker(stakedXdxTracker).claimForAccount(account, account);\\n    IRewardTracker(stakedXlxTracker).claimForAccount(account, account);\\n  }\\n\\n  function claimFees() external nonReentrant {\\n    address account = msg.sender;\\n\\n    IRewardTracker(feeXdxTracker).claimForAccount(account, account);\\n    IRewardTracker(feeXlxTracker).claimForAccount(account, account);\\n  }\\n\\n  function compound() external nonReentrant {\\n    _compound(msg.sender);\\n  }\\n\\n  function compoundForAccount(address _account) external nonReentrant onlyGov {\\n    _compound(_account);\\n  }\\n\\n  function handleRewards(\\n    bool _shouldClaimXdx,\\n    bool _shouldStakeXdx,\\n    bool _shouldClaimEsXdx,\\n    bool _shouldStakeEsXdx,\\n    bool _shouldStakeMultiplierPoints,\\n    bool _shouldClaimWeth,\\n    bool _shouldConvertWethToEth\\n  ) external nonReentrant {\\n    address account = msg.sender;\\n\\n    uint256 xdxAmount = 0;\\n    if (_shouldClaimXdx) {\\n      uint256 xdxAmount0 = IVester(xdxVester).claimForAccount(account, account);\\n      uint256 xdxAmount1 = IVester(xlxVester).claimForAccount(account, account);\\n      xdxAmount = xdxAmount0.add(xdxAmount1);\\n    }\\n\\n    if (_shouldStakeXdx && xdxAmount > 0) {\\n      _stakeXdx(account, account, xdx, xdxAmount);\\n    }\\n\\n    uint256 esXdxAmount = 0;\\n    if (_shouldClaimEsXdx) {\\n      uint256 esXdxAmount0 = IRewardTracker(stakedXdxTracker).claimForAccount(account, account);\\n      uint256 esXdxAmount1 = IRewardTracker(stakedXlxTracker).claimForAccount(account, account);\\n      esXdxAmount = esXdxAmount0.add(esXdxAmount1);\\n    }\\n\\n    if (_shouldStakeEsXdx && esXdxAmount > 0) {\\n      _stakeXdx(account, account, esXdx, esXdxAmount);\\n    }\\n\\n    if (_shouldStakeMultiplierPoints) {\\n      uint256 bnXdxAmount = IRewardTracker(bonusXdxTracker).claimForAccount(account, account);\\n      if (bnXdxAmount > 0) {\\n        IRewardTracker(feeXdxTracker).stakeForAccount(account, account, bnXdx, bnXdxAmount);\\n      }\\n    }\\n\\n    if (_shouldClaimWeth) {\\n      if (_shouldConvertWethToEth) {\\n        uint256 weth0 = IRewardTracker(feeXdxTracker).claimForAccount(account, address(this));\\n        uint256 weth1 = IRewardTracker(feeXlxTracker).claimForAccount(account, address(this));\\n\\n        uint256 wethAmount = weth0.add(weth1);\\n        IWETH(weth).withdraw(wethAmount);\\n\\n        payable(account).sendValue(wethAmount);\\n      } else {\\n        IRewardTracker(feeXdxTracker).claimForAccount(account, account);\\n        IRewardTracker(feeXlxTracker).claimForAccount(account, account);\\n      }\\n    }\\n  }\\n\\n  function batchCompoundForAccounts(address[] memory _accounts) external nonReentrant onlyGov {\\n    for (uint256 i = 0; i < _accounts.length; i++) {\\n      _compound(_accounts[i]);\\n    }\\n  }\\n\\n  function signalTransfer(address _receiver) external nonReentrant {\\n    require(IERC20(xdxVester).balanceOf(msg.sender) == 0, \\\"RewardRouter: sender has vested tokens\\\");\\n    require(IERC20(xlxVester).balanceOf(msg.sender) == 0, \\\"RewardRouter: sender has vested tokens\\\");\\n\\n    _validateReceiver(_receiver);\\n    pendingReceivers[msg.sender] = _receiver;\\n  }\\n\\n  function acceptTransfer(address _sender) external nonReentrant {\\n    require(IERC20(xdxVester).balanceOf(_sender) == 0, \\\"RewardRouter: sender has vested tokens\\\");\\n    require(IERC20(xlxVester).balanceOf(_sender) == 0, \\\"RewardRouter: sender has vested tokens\\\");\\n\\n    address receiver = msg.sender;\\n    require(pendingReceivers[_sender] == receiver, \\\"RewardRouter: transfer not signalled\\\");\\n    delete pendingReceivers[_sender];\\n\\n    _validateReceiver(receiver);\\n    _compound(_sender);\\n\\n    uint256 stakedXdx = IRewardTracker(stakedXdxTracker).depositBalances(_sender, xdx);\\n    if (stakedXdx > 0) {\\n      _unstakeXdx(_sender, xdx, stakedXdx, false);\\n      _stakeXdx(_sender, receiver, xdx, stakedXdx);\\n    }\\n\\n    uint256 stakedEsXdx = IRewardTracker(stakedXdxTracker).depositBalances(_sender, esXdx);\\n    if (stakedEsXdx > 0) {\\n      _unstakeXdx(_sender, esXdx, stakedEsXdx, false);\\n      _stakeXdx(_sender, receiver, esXdx, stakedEsXdx);\\n    }\\n\\n    uint256 stakedBnXdx = IRewardTracker(feeXdxTracker).depositBalances(_sender, bnXdx);\\n    if (stakedBnXdx > 0) {\\n      IRewardTracker(feeXdxTracker).unstakeForAccount(_sender, bnXdx, stakedBnXdx, _sender);\\n      IRewardTracker(feeXdxTracker).stakeForAccount(_sender, receiver, bnXdx, stakedBnXdx);\\n    }\\n\\n    uint256 esXdxBalance = IERC20(esXdx).balanceOf(_sender);\\n    if (esXdxBalance > 0) {\\n      IERC20(esXdx).transferFrom(_sender, receiver, esXdxBalance);\\n    }\\n\\n    uint256 xlxAmount = IRewardTracker(feeXlxTracker).depositBalances(_sender, xlx);\\n    if (xlxAmount > 0) {\\n      IRewardTracker(stakedXlxTracker).unstakeForAccount(\\n        _sender,\\n        feeXlxTracker,\\n        xlxAmount,\\n        _sender\\n      );\\n      IRewardTracker(feeXlxTracker).unstakeForAccount(_sender, xlx, xlxAmount, _sender);\\n\\n      IRewardTracker(feeXlxTracker).stakeForAccount(_sender, receiver, xlx, xlxAmount);\\n      IRewardTracker(stakedXlxTracker).stakeForAccount(\\n        receiver,\\n        receiver,\\n        feeXlxTracker,\\n        xlxAmount\\n      );\\n    }\\n\\n    IVester(xdxVester).transferStakeValues(_sender, receiver);\\n    IVester(xlxVester).transferStakeValues(_sender, receiver);\\n  }\\n\\n  function _validateReceiver(address _receiver) private view {\\n    require(\\n      IRewardTracker(stakedXdxTracker).averageStakedAmounts(_receiver) == 0,\\n      \\\"RewardRouter: stakedXdxTracker.averageStakedAmounts > 0\\\"\\n    );\\n    require(\\n      IRewardTracker(stakedXdxTracker).cumulativeRewards(_receiver) == 0,\\n      \\\"RewardRouter: stakedXdxTracker.cumulativeRewards > 0\\\"\\n    );\\n\\n    require(\\n      IRewardTracker(bonusXdxTracker).averageStakedAmounts(_receiver) == 0,\\n      \\\"RewardRouter: bonusXdxTracker.averageStakedAmounts > 0\\\"\\n    );\\n    require(\\n      IRewardTracker(bonusXdxTracker).cumulativeRewards(_receiver) == 0,\\n      \\\"RewardRouter: bonusXdxTracker.cumulativeRewards > 0\\\"\\n    );\\n\\n    require(\\n      IRewardTracker(feeXdxTracker).averageStakedAmounts(_receiver) == 0,\\n      \\\"RewardRouter: feeXdxTracker.averageStakedAmounts > 0\\\"\\n    );\\n    require(\\n      IRewardTracker(feeXdxTracker).cumulativeRewards(_receiver) == 0,\\n      \\\"RewardRouter: feeXdxTracker.cumulativeRewards > 0\\\"\\n    );\\n\\n    require(\\n      IVester(xdxVester).transferredAverageStakedAmounts(_receiver) == 0,\\n      \\\"RewardRouter: xdxVester.transferredAverageStakedAmounts > 0\\\"\\n    );\\n    require(\\n      IVester(xdxVester).transferredCumulativeRewards(_receiver) == 0,\\n      \\\"RewardRouter: xdxVester.transferredCumulativeRewards > 0\\\"\\n    );\\n\\n    require(\\n      IRewardTracker(stakedXlxTracker).averageStakedAmounts(_receiver) == 0,\\n      \\\"RewardRouter: stakedXlxTracker.averageStakedAmounts > 0\\\"\\n    );\\n    require(\\n      IRewardTracker(stakedXlxTracker).cumulativeRewards(_receiver) == 0,\\n      \\\"RewardRouter: stakedXlxTracker.cumulativeRewards > 0\\\"\\n    );\\n\\n    require(\\n      IRewardTracker(feeXlxTracker).averageStakedAmounts(_receiver) == 0,\\n      \\\"RewardRouter: feeXlxTracker.averageStakedAmounts > 0\\\"\\n    );\\n    require(\\n      IRewardTracker(feeXlxTracker).cumulativeRewards(_receiver) == 0,\\n      \\\"RewardRouter: feeXlxTracker.cumulativeRewards > 0\\\"\\n    );\\n\\n    require(\\n      IVester(xlxVester).transferredAverageStakedAmounts(_receiver) == 0,\\n      \\\"RewardRouter: xdxVester.transferredAverageStakedAmounts > 0\\\"\\n    );\\n    require(\\n      IVester(xlxVester).transferredCumulativeRewards(_receiver) == 0,\\n      \\\"RewardRouter: xdxVester.transferredCumulativeRewards > 0\\\"\\n    );\\n\\n    require(IERC20(xdxVester).balanceOf(_receiver) == 0, \\\"RewardRouter: xdxVester.balance > 0\\\");\\n    require(IERC20(xlxVester).balanceOf(_receiver) == 0, \\\"RewardRouter: xlxVester.balance > 0\\\");\\n  }\\n\\n  function _compound(address _account) private {\\n    _compoundXdx(_account);\\n    _compoundXlx(_account);\\n  }\\n\\n  function _compoundXdx(address _account) private {\\n    uint256 esXdxAmount = IRewardTracker(stakedXdxTracker).claimForAccount(_account, _account);\\n    if (esXdxAmount > 0) {\\n      _stakeXdx(_account, _account, esXdx, esXdxAmount);\\n    }\\n\\n    uint256 bnXdxAmount = IRewardTracker(bonusXdxTracker).claimForAccount(_account, _account);\\n    if (bnXdxAmount > 0) {\\n      IRewardTracker(feeXdxTracker).stakeForAccount(_account, _account, bnXdx, bnXdxAmount);\\n    }\\n  }\\n\\n  function _compoundXlx(address _account) private {\\n    uint256 esXdxAmount = IRewardTracker(stakedXlxTracker).claimForAccount(_account, _account);\\n    if (esXdxAmount > 0) {\\n      _stakeXdx(_account, _account, esXdx, esXdxAmount);\\n    }\\n  }\\n\\n  function _stakeXdx(\\n    address _fundingAccount,\\n    address _account,\\n    address _token,\\n    uint256 _amount\\n  ) private {\\n    require(_amount > 0, \\\"RewardRouter: invalid _amount\\\");\\n\\n    IRewardTracker(stakedXdxTracker).stakeForAccount(_fundingAccount, _account, _token, _amount);\\n    IRewardTracker(bonusXdxTracker).stakeForAccount(_account, _account, stakedXdxTracker, _amount);\\n    IRewardTracker(feeXdxTracker).stakeForAccount(_account, _account, bonusXdxTracker, _amount);\\n\\n    emit StakeXdx(_account, _token, _amount);\\n  }\\n\\n  function _unstakeXdx(\\n    address _account,\\n    address _token,\\n    uint256 _amount,\\n    bool _shouldReduceBnXdx\\n  ) private {\\n    require(_amount > 0, \\\"RewardRouter: invalid _amount\\\");\\n\\n    uint256 balance = IRewardTracker(stakedXdxTracker).stakedAmounts(_account);\\n\\n    IRewardTracker(feeXdxTracker).unstakeForAccount(_account, bonusXdxTracker, _amount, _account);\\n    IRewardTracker(bonusXdxTracker).unstakeForAccount(\\n      _account,\\n      stakedXdxTracker,\\n      _amount,\\n      _account\\n    );\\n    IRewardTracker(stakedXdxTracker).unstakeForAccount(_account, _token, _amount, _account);\\n\\n    if (_shouldReduceBnXdx) {\\n      uint256 bnXdxAmount = IRewardTracker(bonusXdxTracker).claimForAccount(_account, _account);\\n      if (bnXdxAmount > 0) {\\n        IRewardTracker(feeXdxTracker).stakeForAccount(_account, _account, bnXdx, bnXdxAmount);\\n      }\\n\\n      uint256 stakedBnXdx = IRewardTracker(feeXdxTracker).depositBalances(_account, bnXdx);\\n      if (stakedBnXdx > 0) {\\n        uint256 reductionAmount = stakedBnXdx.mul(_amount).div(balance);\\n        IRewardTracker(feeXdxTracker).unstakeForAccount(_account, bnXdx, reductionAmount, _account);\\n        IMintable(bnXdx).burn(_account, reductionAmount);\\n      }\\n    }\\n\\n    emit UnstakeXdx(_account, _token, _amount);\\n  }\\n}\\n\",\"keccak256\":\"0xaebe7f76c51d4822467bc6f0d4293b941a1892cdef83602dad45105204bea0fb\",\"license\":\"MIT\"},\"contracts/staking/interfaces/IRewardRouterV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IRewardRouterV2 {\\n  function feeXlxTracker() external view returns (address);\\n\\n  function stakedXlxTracker() external view returns (address);\\n}\\n\",\"keccak256\":\"0x312f609fdc933e7caa40902a83dbce7472698914b757042916d4b47c4c2d8b3d\",\"license\":\"MIT\"},\"contracts/staking/interfaces/IRewardTracker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IRewardTracker {\\n    function depositBalances(address _account, address _depositToken) external view returns (uint256);\\n    function stakedAmounts(address _account) external view returns (uint256);\\n    function updateRewards() external;\\n    function stake(address _depositToken, uint256 _amount) external;\\n    function stakeForAccount(address _fundingAccount, address _account, address _depositToken, uint256 _amount) external;\\n    function unstake(address _depositToken, uint256 _amount) external;\\n    function unstakeForAccount(address _account, address _depositToken, uint256 _amount, address _receiver) external;\\n    function tokensPerInterval() external view returns (uint256);\\n    function claim(address _receiver) external returns (uint256);\\n    function claimForAccount(address _account, address _receiver) external returns (uint256);\\n    function claimable(address _account) external view returns (uint256);\\n    function averageStakedAmounts(address _account) external view returns (uint256);\\n    function cumulativeRewards(address _account) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xaaacb5c485b9aaf2a290489fe212471580e5a7ba8ac022fe6d7fdd1e864a5330\",\"license\":\"MIT\"},\"contracts/staking/interfaces/IVester.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IVester {\\n    function rewardTracker() external view returns (address);\\n\\n    function claimForAccount(address _account, address _receiver) external returns (uint256);\\n\\n    function claimable(address _account) external view returns (uint256);\\n    function cumulativeClaimAmounts(address _account) external view returns (uint256);\\n    function claimedAmounts(address _account) external view returns (uint256);\\n    function pairAmounts(address _account) external view returns (uint256);\\n    function getVestedAmount(address _account) external view returns (uint256);\\n    function transferredAverageStakedAmounts(address _account) external view returns (uint256);\\n    function transferredCumulativeRewards(address _account) external view returns (uint256);\\n    function cumulativeRewardDeductions(address _account) external view returns (uint256);\\n    function bonusRewards(address _account) external view returns (uint256);\\n\\n    function transferStakeValues(address _sender, address _receiver) external;\\n    function setTransferredAverageStakedAmounts(address _account, uint256 _amount) external;\\n    function setTransferredCumulativeRewards(address _account, uint256 _amount) external;\\n    function setCumulativeRewardDeductions(address _account, uint256 _amount) external;\\n    function setBonusRewards(address _account, uint256 _amount) external;\\n\\n    function getMaxVestableAmount(address _account) external view returns (uint256);\\n    function getCombinedAverageStakedAmount(address _account) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xae96cdbfc636a9af965a3805d09626e578845b3e04eb54960c277cda55bc1855\",\"license\":\"MIT\"},\"contracts/tokens/interfaces/IMintable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IMintable {\\n    function isMinter(address _account) external returns (bool);\\n    function setMinter(address _minter, bool _isActive) external;\\n    function mint(address _account, uint256 _amount) external;\\n    function burn(address _account, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0xb1174808dcd4195a8fadf042f9e8e3808ae61842af7ed29b3ec059a206c7f1fe\",\"license\":\"MIT\"},\"contracts/tokens/interfaces/IWETH.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n    function transfer(address to, uint value) external returns (bool);\\n    function withdraw(uint) external;\\n}\\n\",\"keccak256\":\"0x29613132c0162f9cdc8336e895d1da9aaf3660909adcf1a0134d714e53524ca4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 23515,
        "contract": "contracts/staking/RewardRouterV2.sol:RewardRouterV2",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 3,
        "contract": "contracts/staking/RewardRouterV2.sol:RewardRouterV2",
        "label": "gov",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 38592,
        "contract": "contracts/staking/RewardRouterV2.sol:RewardRouterV2",
        "label": "isInitialized",
        "offset": 20,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 38594,
        "contract": "contracts/staking/RewardRouterV2.sol:RewardRouterV2",
        "label": "weth",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 38596,
        "contract": "contracts/staking/RewardRouterV2.sol:RewardRouterV2",
        "label": "xdx",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 38598,
        "contract": "contracts/staking/RewardRouterV2.sol:RewardRouterV2",
        "label": "esXdx",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 38600,
        "contract": "contracts/staking/RewardRouterV2.sol:RewardRouterV2",
        "label": "bnXdx",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 38602,
        "contract": "contracts/staking/RewardRouterV2.sol:RewardRouterV2",
        "label": "xlx",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 38604,
        "contract": "contracts/staking/RewardRouterV2.sol:RewardRouterV2",
        "label": "stakedXdxTracker",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 38606,
        "contract": "contracts/staking/RewardRouterV2.sol:RewardRouterV2",
        "label": "bonusXdxTracker",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 38608,
        "contract": "contracts/staking/RewardRouterV2.sol:RewardRouterV2",
        "label": "feeXdxTracker",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 38611,
        "contract": "contracts/staking/RewardRouterV2.sol:RewardRouterV2",
        "label": "stakedXlxTracker",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 38614,
        "contract": "contracts/staking/RewardRouterV2.sol:RewardRouterV2",
        "label": "feeXlxTracker",
        "offset": 0,
        "slot": "11",
        "type": "t_address"
      },
      {
        "astId": 38616,
        "contract": "contracts/staking/RewardRouterV2.sol:RewardRouterV2",
        "label": "xlxManager",
        "offset": 0,
        "slot": "12",
        "type": "t_address"
      },
      {
        "astId": 38618,
        "contract": "contracts/staking/RewardRouterV2.sol:RewardRouterV2",
        "label": "xdxVester",
        "offset": 0,
        "slot": "13",
        "type": "t_address"
      },
      {
        "astId": 38620,
        "contract": "contracts/staking/RewardRouterV2.sol:RewardRouterV2",
        "label": "xlxVester",
        "offset": 0,
        "slot": "14",
        "type": "t_address"
      },
      {
        "astId": 38624,
        "contract": "contracts/staking/RewardRouterV2.sol:RewardRouterV2",
        "label": "pendingReceivers",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_address,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}